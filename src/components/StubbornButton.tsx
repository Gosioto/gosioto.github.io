// src/components/StubbornButton.tsx
'use client';
import { useState, useEffect, useRef } from 'react';

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å cookie
const setCookie = (name: string, value: string, days: number) => {
  const date = new Date();
  date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
  const expires = `expires=${date.toUTCString()}`;
  document.cookie = `${name}=${value};${expires};path=/;SameSite=Lax`;
};

const getCookie = (name: string): string | null => {
  const nameEQ = `${name}=`;
  const ca = document.cookie.split(';');
  for (let i = 0; i < ca.length; i++) {
    let c = ca[i];
    while (c.charAt(0) === ' ') c = c.substring(1, c.length);
    if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
  }
  return null;
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è cookie
const isCookieExpired = (cookieValue: string): boolean => {
  try {
    const timestamp = parseInt(cookieValue);
    const now = new Date().getTime();
    const oneDayInMs = 24 * 60 * 60 * 1000;
    return (now - timestamp) > oneDayInMs;
  } catch (e) {
    return true; // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, —Å—á–∏—Ç–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–º
  }
};

export default function StubbornButton() {
  const [position, setPosition] = useState({ x: 50, y: 50 });
  const [isStopped, setIsStopped] = useState(false);
  const [showSpoiler, setShowSpoiler] = useState(false);
  const [isHidden, setIsHidden] = useState(false);
  const [showConfirm, setShowConfirm] = useState(false);
  const [isClient, setIsClient] = useState(false);
  const buttonRef = useRef<HTMLButtonElement>(null);
  const stopButtonRef = useRef<HTMLButtonElement>(null);

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
  useEffect(() => {
    setIsClient(true);
  }, []);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º cookie –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    if (!isClient) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–π–º–∞–Ω–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞
    const caughtCookie = getCookie('stubbornButtonCaught');
    if (caughtCookie === 'true') {
      setIsHidden(true);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ —Å–∫—Ä—ã—Ç–∞
    const closedCookie = getCookie('stubbornButtonClosed');
    if (closedCookie) {
      // –ï—Å–ª–∏ cookie –∏—Å—Ç–µ–∫, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
      if (isCookieExpired(closedCookie)) {
        document.cookie = 'stubbornButtonClosed=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
        setIsHidden(false);
      } else {
        setIsHidden(true);
      }
    } else {
      setIsHidden(false);
    }
  }, [isClient]);

  // –î–≤–∏–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
  const moveButton = () => {
    if (isStopped || isHidden) return;
    
    const maxX = window.innerWidth - 100;
    const maxY = window.innerHeight - 50;
    
    const newX = Math.floor(Math.random() * maxX);
    const newY = Math.floor(Math.random() * maxY);
    
    setPosition({ x: newX, y: newY });
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–µ–¥–µ–Ω–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
  const handleMouseOver = () => {
    if (!isStopped && !isHidden) {
      moveButton();
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É (–ø–æ–π–º–∞–ª–∏)
  const handleClick = () => {
    setShowSpoiler(true);
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –ø–æ–π–º–∞–Ω–∞
    setCookie('stubbornButtonCaught', 'true', 365); // –ù–∞ –≥–æ–¥
    
    // –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
    setTimeout(() => {
      setIsHidden(true);
    }, 3000);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
  const handleStopClick = () => {
    setShowConfirm(true);
  };

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ —Å–∫—Ä—ã—Ç–∏—è
  const confirmStop = () => {
    setIsStopped(true);
    setShowConfirm(false);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ —Å–∫—Ä—ã—Ç–∞ (—Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –≤ –≤–∏–¥–µ timestamp)
    setCookie('stubbornButtonClosed', new Date().getTime().toString(), 1); // –ù–∞ –¥–µ–Ω—å
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
    setTimeout(() => {
      setIsHidden(true);
    }, 1000);
  };

  // –û—Ç–º–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
  const cancelStop = () => {
    setShowConfirm(false);
  };

  // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏
  useEffect(() => {
    if (!isStopped && !isHidden && isClient) {
      const interval = setInterval(moveButton, 2000);
      return () => clearInterval(interval);
    }
  }, [isStopped, isHidden, isClient]);

  // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ —Å–∫—Ä—ã—Ç–∞ –∏–ª–∏ –Ω–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ, –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
  if (!isClient || isHidden) {
    return null;
  }

  return (
    <>
      <button
        ref={buttonRef}
        id="stubborn-button"
        className="stubborn-button"
        style={{
          position: 'fixed',
          left: `${position.x}px`,
          top: `${position.y}px`,
          zIndex: 1000,
          opacity: isStopped ? 0.7 : 1,
          transition: isStopped ? 'all 0.5s ease' : 'none',
        }}
        onMouseOver={handleMouseOver}
        onClick={handleClick}
        title={isStopped ? "–Ø –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è" : "–ù–µ –ø—ã—Ç–∞–π—Å—è..."}
      >
        üèÉ‚Äç‚ôÇÔ∏è –ü–æ–π–º–∞–π –º–µ–Ω—è, –µ—Å–ª–∏ —Å–º–æ–∂–µ—à—å!
      </button>
      
      <button
        ref={stopButtonRef}
        id="stop-button"
        className="stop-button"
        style={{
          position: 'fixed',
          right: '20px',
          bottom: '20px',
          zIndex: 1001,
        }}
        onClick={handleStopClick}
        title="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–±–µ–≥–∞—é—â—É—é –∫–Ω–æ–ø–∫—É"
      >
        ‚úñÔ∏è
      </button>
      
      {showConfirm && (
        <div className="confirm-modal">
          <div className="confirm-content">
            <h3>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</h3>
            <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?</p>
            <div className="confirm-buttons">
              <button onClick={confirmStop} className="confirm-yes">
                –î–∞, —Å–∫—Ä—ã—Ç—å
              </button>
              <button onClick={cancelStop} className="confirm-no">
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        </div>
      )}
      
      {showSpoiler && (
        <div id="spoiler-modal" className="spoiler-modal">
          <div className="spoiler-content">
            <h3>ü§Ø –¢—ã –≤—Å—ë-—Ç–∞–∫–∏ –ø–æ–π–º–∞–ª –º–µ–Ω—è?!</h3>
            <p>–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ... –≤–æ—Ç —Ç–≤–æ–π –ø—Ä–∏–∑:</p>
            <pre><code>console.log("üèÜ –¢—ã –ø–æ–±–µ–¥–∏–ª(–∞) —Å–∏—Å—Ç–µ–º—É!")</code></pre>
            <button onClick={() => setShowSpoiler(false)}>–ó–∞–∫—Ä—ã—Ç—å</button>
          </div>
        </div>
      )}
    </>
  );
}